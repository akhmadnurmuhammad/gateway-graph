// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: proto/authorization/operation_permission/operation_permission.proto

package operation_permission

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OperationPermissionClient is the client API for OperationPermission service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OperationPermissionClient interface {
	Fetch(ctx context.Context, in *FetchRequestOperationPermission, opts ...grpc.CallOption) (*FetchResponseOperationPermission, error)
	Store(ctx context.Context, in *OperationPermissionRequest, opts ...grpc.CallOption) (*MainResponseOperationPermission, error)
	FindByID(ctx context.Context, in *FindByIDOperationPermissionRequest, opts ...grpc.CallOption) (*MainResponseOperationPermission, error)
	Update(ctx context.Context, in *OperationPermissionRequest, opts ...grpc.CallOption) (*MainResponseOperationPermission, error)
	Delete(ctx context.Context, in *FindByIDOperationPermissionRequest, opts ...grpc.CallOption) (*MainResponseOperationPermission, error)
}

type operationPermissionClient struct {
	cc grpc.ClientConnInterface
}

func NewOperationPermissionClient(cc grpc.ClientConnInterface) OperationPermissionClient {
	return &operationPermissionClient{cc}
}

func (c *operationPermissionClient) Fetch(ctx context.Context, in *FetchRequestOperationPermission, opts ...grpc.CallOption) (*FetchResponseOperationPermission, error) {
	out := new(FetchResponseOperationPermission)
	err := c.cc.Invoke(ctx, "/operation_permission.OperationPermission/Fetch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operationPermissionClient) Store(ctx context.Context, in *OperationPermissionRequest, opts ...grpc.CallOption) (*MainResponseOperationPermission, error) {
	out := new(MainResponseOperationPermission)
	err := c.cc.Invoke(ctx, "/operation_permission.OperationPermission/Store", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operationPermissionClient) FindByID(ctx context.Context, in *FindByIDOperationPermissionRequest, opts ...grpc.CallOption) (*MainResponseOperationPermission, error) {
	out := new(MainResponseOperationPermission)
	err := c.cc.Invoke(ctx, "/operation_permission.OperationPermission/FindByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operationPermissionClient) Update(ctx context.Context, in *OperationPermissionRequest, opts ...grpc.CallOption) (*MainResponseOperationPermission, error) {
	out := new(MainResponseOperationPermission)
	err := c.cc.Invoke(ctx, "/operation_permission.OperationPermission/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operationPermissionClient) Delete(ctx context.Context, in *FindByIDOperationPermissionRequest, opts ...grpc.CallOption) (*MainResponseOperationPermission, error) {
	out := new(MainResponseOperationPermission)
	err := c.cc.Invoke(ctx, "/operation_permission.OperationPermission/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OperationPermissionServer is the server API for OperationPermission service.
// All implementations must embed UnimplementedOperationPermissionServer
// for forward compatibility
type OperationPermissionServer interface {
	Fetch(context.Context, *FetchRequestOperationPermission) (*FetchResponseOperationPermission, error)
	Store(context.Context, *OperationPermissionRequest) (*MainResponseOperationPermission, error)
	FindByID(context.Context, *FindByIDOperationPermissionRequest) (*MainResponseOperationPermission, error)
	Update(context.Context, *OperationPermissionRequest) (*MainResponseOperationPermission, error)
	Delete(context.Context, *FindByIDOperationPermissionRequest) (*MainResponseOperationPermission, error)
	mustEmbedUnimplementedOperationPermissionServer()
}

// UnimplementedOperationPermissionServer must be embedded to have forward compatible implementations.
type UnimplementedOperationPermissionServer struct {
}

func (UnimplementedOperationPermissionServer) Fetch(context.Context, *FetchRequestOperationPermission) (*FetchResponseOperationPermission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fetch not implemented")
}
func (UnimplementedOperationPermissionServer) Store(context.Context, *OperationPermissionRequest) (*MainResponseOperationPermission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Store not implemented")
}
func (UnimplementedOperationPermissionServer) FindByID(context.Context, *FindByIDOperationPermissionRequest) (*MainResponseOperationPermission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByID not implemented")
}
func (UnimplementedOperationPermissionServer) Update(context.Context, *OperationPermissionRequest) (*MainResponseOperationPermission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedOperationPermissionServer) Delete(context.Context, *FindByIDOperationPermissionRequest) (*MainResponseOperationPermission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedOperationPermissionServer) mustEmbedUnimplementedOperationPermissionServer() {}

// UnsafeOperationPermissionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OperationPermissionServer will
// result in compilation errors.
type UnsafeOperationPermissionServer interface {
	mustEmbedUnimplementedOperationPermissionServer()
}

func RegisterOperationPermissionServer(s grpc.ServiceRegistrar, srv OperationPermissionServer) {
	s.RegisterService(&OperationPermission_ServiceDesc, srv)
}

func _OperationPermission_Fetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchRequestOperationPermission)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperationPermissionServer).Fetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/operation_permission.OperationPermission/Fetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperationPermissionServer).Fetch(ctx, req.(*FetchRequestOperationPermission))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperationPermission_Store_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperationPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperationPermissionServer).Store(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/operation_permission.OperationPermission/Store",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperationPermissionServer).Store(ctx, req.(*OperationPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperationPermission_FindByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIDOperationPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperationPermissionServer).FindByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/operation_permission.OperationPermission/FindByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperationPermissionServer).FindByID(ctx, req.(*FindByIDOperationPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperationPermission_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperationPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperationPermissionServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/operation_permission.OperationPermission/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperationPermissionServer).Update(ctx, req.(*OperationPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperationPermission_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIDOperationPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperationPermissionServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/operation_permission.OperationPermission/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperationPermissionServer).Delete(ctx, req.(*FindByIDOperationPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OperationPermission_ServiceDesc is the grpc.ServiceDesc for OperationPermission service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OperationPermission_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "operation_permission.OperationPermission",
	HandlerType: (*OperationPermissionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Fetch",
			Handler:    _OperationPermission_Fetch_Handler,
		},
		{
			MethodName: "Store",
			Handler:    _OperationPermission_Store_Handler,
		},
		{
			MethodName: "FindByID",
			Handler:    _OperationPermission_FindByID_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _OperationPermission_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _OperationPermission_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/authorization/operation_permission/operation_permission.proto",
}

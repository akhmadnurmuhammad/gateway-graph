// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: proto/authorization/module/module.proto

package module

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ModuleClient is the client API for Module service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModuleClient interface {
	Fetch(ctx context.Context, in *FetchRequestModule, opts ...grpc.CallOption) (*FetchResponseModule, error)
	Store(ctx context.Context, in *ModuleRequest, opts ...grpc.CallOption) (*MainResponseModule, error)
	FindByID(ctx context.Context, in *FindByIDModuleRequest, opts ...grpc.CallOption) (*MainResponseModule, error)
	Update(ctx context.Context, in *ModuleRequest, opts ...grpc.CallOption) (*MainResponseModule, error)
	Delete(ctx context.Context, in *FindByIDModuleRequest, opts ...grpc.CallOption) (*MainResponseModule, error)
}

type moduleClient struct {
	cc grpc.ClientConnInterface
}

func NewModuleClient(cc grpc.ClientConnInterface) ModuleClient {
	return &moduleClient{cc}
}

func (c *moduleClient) Fetch(ctx context.Context, in *FetchRequestModule, opts ...grpc.CallOption) (*FetchResponseModule, error) {
	out := new(FetchResponseModule)
	err := c.cc.Invoke(ctx, "/module.Module/Fetch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleClient) Store(ctx context.Context, in *ModuleRequest, opts ...grpc.CallOption) (*MainResponseModule, error) {
	out := new(MainResponseModule)
	err := c.cc.Invoke(ctx, "/module.Module/Store", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleClient) FindByID(ctx context.Context, in *FindByIDModuleRequest, opts ...grpc.CallOption) (*MainResponseModule, error) {
	out := new(MainResponseModule)
	err := c.cc.Invoke(ctx, "/module.Module/FindByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleClient) Update(ctx context.Context, in *ModuleRequest, opts ...grpc.CallOption) (*MainResponseModule, error) {
	out := new(MainResponseModule)
	err := c.cc.Invoke(ctx, "/module.Module/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleClient) Delete(ctx context.Context, in *FindByIDModuleRequest, opts ...grpc.CallOption) (*MainResponseModule, error) {
	out := new(MainResponseModule)
	err := c.cc.Invoke(ctx, "/module.Module/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModuleServer is the server API for Module service.
// All implementations must embed UnimplementedModuleServer
// for forward compatibility
type ModuleServer interface {
	Fetch(context.Context, *FetchRequestModule) (*FetchResponseModule, error)
	Store(context.Context, *ModuleRequest) (*MainResponseModule, error)
	FindByID(context.Context, *FindByIDModuleRequest) (*MainResponseModule, error)
	Update(context.Context, *ModuleRequest) (*MainResponseModule, error)
	Delete(context.Context, *FindByIDModuleRequest) (*MainResponseModule, error)
	mustEmbedUnimplementedModuleServer()
}

// UnimplementedModuleServer must be embedded to have forward compatible implementations.
type UnimplementedModuleServer struct {
}

func (UnimplementedModuleServer) Fetch(context.Context, *FetchRequestModule) (*FetchResponseModule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fetch not implemented")
}
func (UnimplementedModuleServer) Store(context.Context, *ModuleRequest) (*MainResponseModule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Store not implemented")
}
func (UnimplementedModuleServer) FindByID(context.Context, *FindByIDModuleRequest) (*MainResponseModule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByID not implemented")
}
func (UnimplementedModuleServer) Update(context.Context, *ModuleRequest) (*MainResponseModule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedModuleServer) Delete(context.Context, *FindByIDModuleRequest) (*MainResponseModule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedModuleServer) mustEmbedUnimplementedModuleServer() {}

// UnsafeModuleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModuleServer will
// result in compilation errors.
type UnsafeModuleServer interface {
	mustEmbedUnimplementedModuleServer()
}

func RegisterModuleServer(s grpc.ServiceRegistrar, srv ModuleServer) {
	s.RegisterService(&Module_ServiceDesc, srv)
}

func _Module_Fetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchRequestModule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServer).Fetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/module.Module/Fetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServer).Fetch(ctx, req.(*FetchRequestModule))
	}
	return interceptor(ctx, in, info, handler)
}

func _Module_Store_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServer).Store(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/module.Module/Store",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServer).Store(ctx, req.(*ModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Module_FindByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIDModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServer).FindByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/module.Module/FindByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServer).FindByID(ctx, req.(*FindByIDModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Module_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/module.Module/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServer).Update(ctx, req.(*ModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Module_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIDModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/module.Module/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServer).Delete(ctx, req.(*FindByIDModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Module_ServiceDesc is the grpc.ServiceDesc for Module service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Module_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "module.Module",
	HandlerType: (*ModuleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Fetch",
			Handler:    _Module_Fetch_Handler,
		},
		{
			MethodName: "Store",
			Handler:    _Module_Store_Handler,
		},
		{
			MethodName: "FindByID",
			Handler:    _Module_FindByID_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Module_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Module_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/authorization/module/module.proto",
}

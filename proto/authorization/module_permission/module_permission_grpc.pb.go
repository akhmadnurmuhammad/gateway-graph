// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: proto/authorization/module_permission/module_permission.proto

package module_permission

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ModulePermissionClient is the client API for ModulePermission service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModulePermissionClient interface {
	Fetch(ctx context.Context, in *FetchRequestModulePermission, opts ...grpc.CallOption) (*FetchResponseModulePermission, error)
	Store(ctx context.Context, in *ModulePermissionRequest, opts ...grpc.CallOption) (*MainResponseModulePermission, error)
	FindByID(ctx context.Context, in *FindByIDModulePermissionRequest, opts ...grpc.CallOption) (*MainResponseModulePermission, error)
	Update(ctx context.Context, in *ModulePermissionRequest, opts ...grpc.CallOption) (*MainResponseModulePermission, error)
	Delete(ctx context.Context, in *FindByIDModulePermissionRequest, opts ...grpc.CallOption) (*MainResponseModulePermission, error)
}

type modulePermissionClient struct {
	cc grpc.ClientConnInterface
}

func NewModulePermissionClient(cc grpc.ClientConnInterface) ModulePermissionClient {
	return &modulePermissionClient{cc}
}

func (c *modulePermissionClient) Fetch(ctx context.Context, in *FetchRequestModulePermission, opts ...grpc.CallOption) (*FetchResponseModulePermission, error) {
	out := new(FetchResponseModulePermission)
	err := c.cc.Invoke(ctx, "/module_permission.ModulePermission/Fetch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modulePermissionClient) Store(ctx context.Context, in *ModulePermissionRequest, opts ...grpc.CallOption) (*MainResponseModulePermission, error) {
	out := new(MainResponseModulePermission)
	err := c.cc.Invoke(ctx, "/module_permission.ModulePermission/Store", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modulePermissionClient) FindByID(ctx context.Context, in *FindByIDModulePermissionRequest, opts ...grpc.CallOption) (*MainResponseModulePermission, error) {
	out := new(MainResponseModulePermission)
	err := c.cc.Invoke(ctx, "/module_permission.ModulePermission/FindByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modulePermissionClient) Update(ctx context.Context, in *ModulePermissionRequest, opts ...grpc.CallOption) (*MainResponseModulePermission, error) {
	out := new(MainResponseModulePermission)
	err := c.cc.Invoke(ctx, "/module_permission.ModulePermission/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modulePermissionClient) Delete(ctx context.Context, in *FindByIDModulePermissionRequest, opts ...grpc.CallOption) (*MainResponseModulePermission, error) {
	out := new(MainResponseModulePermission)
	err := c.cc.Invoke(ctx, "/module_permission.ModulePermission/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModulePermissionServer is the server API for ModulePermission service.
// All implementations must embed UnimplementedModulePermissionServer
// for forward compatibility
type ModulePermissionServer interface {
	Fetch(context.Context, *FetchRequestModulePermission) (*FetchResponseModulePermission, error)
	Store(context.Context, *ModulePermissionRequest) (*MainResponseModulePermission, error)
	FindByID(context.Context, *FindByIDModulePermissionRequest) (*MainResponseModulePermission, error)
	Update(context.Context, *ModulePermissionRequest) (*MainResponseModulePermission, error)
	Delete(context.Context, *FindByIDModulePermissionRequest) (*MainResponseModulePermission, error)
	mustEmbedUnimplementedModulePermissionServer()
}

// UnimplementedModulePermissionServer must be embedded to have forward compatible implementations.
type UnimplementedModulePermissionServer struct {
}

func (UnimplementedModulePermissionServer) Fetch(context.Context, *FetchRequestModulePermission) (*FetchResponseModulePermission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fetch not implemented")
}
func (UnimplementedModulePermissionServer) Store(context.Context, *ModulePermissionRequest) (*MainResponseModulePermission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Store not implemented")
}
func (UnimplementedModulePermissionServer) FindByID(context.Context, *FindByIDModulePermissionRequest) (*MainResponseModulePermission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByID not implemented")
}
func (UnimplementedModulePermissionServer) Update(context.Context, *ModulePermissionRequest) (*MainResponseModulePermission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedModulePermissionServer) Delete(context.Context, *FindByIDModulePermissionRequest) (*MainResponseModulePermission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedModulePermissionServer) mustEmbedUnimplementedModulePermissionServer() {}

// UnsafeModulePermissionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModulePermissionServer will
// result in compilation errors.
type UnsafeModulePermissionServer interface {
	mustEmbedUnimplementedModulePermissionServer()
}

func RegisterModulePermissionServer(s grpc.ServiceRegistrar, srv ModulePermissionServer) {
	s.RegisterService(&ModulePermission_ServiceDesc, srv)
}

func _ModulePermission_Fetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchRequestModulePermission)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModulePermissionServer).Fetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/module_permission.ModulePermission/Fetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModulePermissionServer).Fetch(ctx, req.(*FetchRequestModulePermission))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModulePermission_Store_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModulePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModulePermissionServer).Store(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/module_permission.ModulePermission/Store",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModulePermissionServer).Store(ctx, req.(*ModulePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModulePermission_FindByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIDModulePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModulePermissionServer).FindByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/module_permission.ModulePermission/FindByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModulePermissionServer).FindByID(ctx, req.(*FindByIDModulePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModulePermission_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModulePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModulePermissionServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/module_permission.ModulePermission/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModulePermissionServer).Update(ctx, req.(*ModulePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModulePermission_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIDModulePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModulePermissionServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/module_permission.ModulePermission/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModulePermissionServer).Delete(ctx, req.(*FindByIDModulePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ModulePermission_ServiceDesc is the grpc.ServiceDesc for ModulePermission service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ModulePermission_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "module_permission.ModulePermission",
	HandlerType: (*ModulePermissionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Fetch",
			Handler:    _ModulePermission_Fetch_Handler,
		},
		{
			MethodName: "Store",
			Handler:    _ModulePermission_Store_Handler,
		},
		{
			MethodName: "FindByID",
			Handler:    _ModulePermission_FindByID_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ModulePermission_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ModulePermission_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/authorization/module_permission/module_permission.proto",
}

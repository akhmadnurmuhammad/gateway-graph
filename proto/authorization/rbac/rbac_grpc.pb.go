// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: proto/authorization/rbac/rbac.proto

package rbac

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RBACClient is the client API for RBAC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RBACClient interface {
	Fetch(ctx context.Context, in *FetchRequestRBAC, opts ...grpc.CallOption) (*FetchResponseRBAC, error)
	Store(ctx context.Context, in *RBACRequest, opts ...grpc.CallOption) (*MainResponseRBAC, error)
	Detail(ctx context.Context, in *FindByIDRBACRequest, opts ...grpc.CallOption) (*MainResponseRBAC, error)
}

type rBACClient struct {
	cc grpc.ClientConnInterface
}

func NewRBACClient(cc grpc.ClientConnInterface) RBACClient {
	return &rBACClient{cc}
}

func (c *rBACClient) Fetch(ctx context.Context, in *FetchRequestRBAC, opts ...grpc.CallOption) (*FetchResponseRBAC, error) {
	out := new(FetchResponseRBAC)
	err := c.cc.Invoke(ctx, "/rbac.RBAC/Fetch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACClient) Store(ctx context.Context, in *RBACRequest, opts ...grpc.CallOption) (*MainResponseRBAC, error) {
	out := new(MainResponseRBAC)
	err := c.cc.Invoke(ctx, "/rbac.RBAC/Store", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACClient) Detail(ctx context.Context, in *FindByIDRBACRequest, opts ...grpc.CallOption) (*MainResponseRBAC, error) {
	out := new(MainResponseRBAC)
	err := c.cc.Invoke(ctx, "/rbac.RBAC/Detail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RBACServer is the server API for RBAC service.
// All implementations must embed UnimplementedRBACServer
// for forward compatibility
type RBACServer interface {
	Fetch(context.Context, *FetchRequestRBAC) (*FetchResponseRBAC, error)
	Store(context.Context, *RBACRequest) (*MainResponseRBAC, error)
	Detail(context.Context, *FindByIDRBACRequest) (*MainResponseRBAC, error)
	mustEmbedUnimplementedRBACServer()
}

// UnimplementedRBACServer must be embedded to have forward compatible implementations.
type UnimplementedRBACServer struct {
}

func (UnimplementedRBACServer) Fetch(context.Context, *FetchRequestRBAC) (*FetchResponseRBAC, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fetch not implemented")
}
func (UnimplementedRBACServer) Store(context.Context, *RBACRequest) (*MainResponseRBAC, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Store not implemented")
}
func (UnimplementedRBACServer) Detail(context.Context, *FindByIDRBACRequest) (*MainResponseRBAC, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Detail not implemented")
}
func (UnimplementedRBACServer) mustEmbedUnimplementedRBACServer() {}

// UnsafeRBACServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RBACServer will
// result in compilation errors.
type UnsafeRBACServer interface {
	mustEmbedUnimplementedRBACServer()
}

func RegisterRBACServer(s grpc.ServiceRegistrar, srv RBACServer) {
	s.RegisterService(&RBAC_ServiceDesc, srv)
}

func _RBAC_Fetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchRequestRBAC)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServer).Fetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.RBAC/Fetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServer).Fetch(ctx, req.(*FetchRequestRBAC))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBAC_Store_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RBACRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServer).Store(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.RBAC/Store",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServer).Store(ctx, req.(*RBACRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBAC_Detail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIDRBACRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServer).Detail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.RBAC/Detail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServer).Detail(ctx, req.(*FindByIDRBACRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RBAC_ServiceDesc is the grpc.ServiceDesc for RBAC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RBAC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rbac.RBAC",
	HandlerType: (*RBACServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Fetch",
			Handler:    _RBAC_Fetch_Handler,
		},
		{
			MethodName: "Store",
			Handler:    _RBAC_Store_Handler,
		},
		{
			MethodName: "Detail",
			Handler:    _RBAC_Detail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/authorization/rbac/rbac.proto",
}

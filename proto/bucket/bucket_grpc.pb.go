// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: proto/bucket/bucket.proto

package bucket

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BucketClient is the client API for Bucket service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BucketClient interface {
	Upload(ctx context.Context, opts ...grpc.CallOption) (Bucket_UploadClient, error)
	BatchUpload(ctx context.Context, opts ...grpc.CallOption) (Bucket_BatchUploadClient, error)
	UploadAsync(ctx context.Context, opts ...grpc.CallOption) (Bucket_UploadAsyncClient, error)
}

type bucketClient struct {
	cc grpc.ClientConnInterface
}

func NewBucketClient(cc grpc.ClientConnInterface) BucketClient {
	return &bucketClient{cc}
}

func (c *bucketClient) Upload(ctx context.Context, opts ...grpc.CallOption) (Bucket_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &Bucket_ServiceDesc.Streams[0], "/bucket.Bucket/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &bucketUploadClient{stream}
	return x, nil
}

type Bucket_UploadClient interface {
	Send(*UploadRequest) error
	CloseAndRecv() (*UploadResponse, error)
	grpc.ClientStream
}

type bucketUploadClient struct {
	grpc.ClientStream
}

func (x *bucketUploadClient) Send(m *UploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bucketUploadClient) CloseAndRecv() (*UploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bucketClient) BatchUpload(ctx context.Context, opts ...grpc.CallOption) (Bucket_BatchUploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &Bucket_ServiceDesc.Streams[1], "/bucket.Bucket/BatchUpload", opts...)
	if err != nil {
		return nil, err
	}
	x := &bucketBatchUploadClient{stream}
	return x, nil
}

type Bucket_BatchUploadClient interface {
	Send(*BatchUploadRequest) error
	CloseAndRecv() (*BatchUploadResponse, error)
	grpc.ClientStream
}

type bucketBatchUploadClient struct {
	grpc.ClientStream
}

func (x *bucketBatchUploadClient) Send(m *BatchUploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bucketBatchUploadClient) CloseAndRecv() (*BatchUploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(BatchUploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bucketClient) UploadAsync(ctx context.Context, opts ...grpc.CallOption) (Bucket_UploadAsyncClient, error) {
	stream, err := c.cc.NewStream(ctx, &Bucket_ServiceDesc.Streams[2], "/bucket.Bucket/UploadAsync", opts...)
	if err != nil {
		return nil, err
	}
	x := &bucketUploadAsyncClient{stream}
	return x, nil
}

type Bucket_UploadAsyncClient interface {
	Send(*BatchUploadRequest) error
	CloseAndRecv() (*UploadResponse, error)
	grpc.ClientStream
}

type bucketUploadAsyncClient struct {
	grpc.ClientStream
}

func (x *bucketUploadAsyncClient) Send(m *BatchUploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bucketUploadAsyncClient) CloseAndRecv() (*UploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BucketServer is the server API for Bucket service.
// All implementations must embed UnimplementedBucketServer
// for forward compatibility
type BucketServer interface {
	Upload(Bucket_UploadServer) error
	BatchUpload(Bucket_BatchUploadServer) error
	UploadAsync(Bucket_UploadAsyncServer) error
	mustEmbedUnimplementedBucketServer()
}

// UnimplementedBucketServer must be embedded to have forward compatible implementations.
type UnimplementedBucketServer struct {
}

func (UnimplementedBucketServer) Upload(Bucket_UploadServer) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedBucketServer) BatchUpload(Bucket_BatchUploadServer) error {
	return status.Errorf(codes.Unimplemented, "method BatchUpload not implemented")
}
func (UnimplementedBucketServer) UploadAsync(Bucket_UploadAsyncServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadAsync not implemented")
}
func (UnimplementedBucketServer) mustEmbedUnimplementedBucketServer() {}

// UnsafeBucketServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BucketServer will
// result in compilation errors.
type UnsafeBucketServer interface {
	mustEmbedUnimplementedBucketServer()
}

func RegisterBucketServer(s grpc.ServiceRegistrar, srv BucketServer) {
	s.RegisterService(&Bucket_ServiceDesc, srv)
}

func _Bucket_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BucketServer).Upload(&bucketUploadServer{stream})
}

type Bucket_UploadServer interface {
	SendAndClose(*UploadResponse) error
	Recv() (*UploadRequest, error)
	grpc.ServerStream
}

type bucketUploadServer struct {
	grpc.ServerStream
}

func (x *bucketUploadServer) SendAndClose(m *UploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bucketUploadServer) Recv() (*UploadRequest, error) {
	m := new(UploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Bucket_BatchUpload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BucketServer).BatchUpload(&bucketBatchUploadServer{stream})
}

type Bucket_BatchUploadServer interface {
	SendAndClose(*BatchUploadResponse) error
	Recv() (*BatchUploadRequest, error)
	grpc.ServerStream
}

type bucketBatchUploadServer struct {
	grpc.ServerStream
}

func (x *bucketBatchUploadServer) SendAndClose(m *BatchUploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bucketBatchUploadServer) Recv() (*BatchUploadRequest, error) {
	m := new(BatchUploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Bucket_UploadAsync_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BucketServer).UploadAsync(&bucketUploadAsyncServer{stream})
}

type Bucket_UploadAsyncServer interface {
	SendAndClose(*UploadResponse) error
	Recv() (*BatchUploadRequest, error)
	grpc.ServerStream
}

type bucketUploadAsyncServer struct {
	grpc.ServerStream
}

func (x *bucketUploadAsyncServer) SendAndClose(m *UploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bucketUploadAsyncServer) Recv() (*BatchUploadRequest, error) {
	m := new(BatchUploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Bucket_ServiceDesc is the grpc.ServiceDesc for Bucket service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bucket_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bucket.Bucket",
	HandlerType: (*BucketServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _Bucket_Upload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BatchUpload",
			Handler:       _Bucket_BatchUpload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "UploadAsync",
			Handler:       _Bucket_UploadAsync_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/bucket/bucket.proto",
}

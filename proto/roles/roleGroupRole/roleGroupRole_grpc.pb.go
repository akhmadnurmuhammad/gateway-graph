// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: proto/roles/roleGroupRole/roleGroupRole.proto

package role_group_roles

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RoleGroupRolesClient is the client API for RoleGroupRoles service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoleGroupRolesClient interface {
	Store(ctx context.Context, in *RoleGroupRoleRequest, opts ...grpc.CallOption) (*MainResponse, error)
	Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*FetchResponse, error)
	FindByID(ctx context.Context, in *FindByIDRequest, opts ...grpc.CallOption) (*MainResponse, error)
	Update(ctx context.Context, in *RoleGroupRoleRequest, opts ...grpc.CallOption) (*MainResponse, error)
	Delete(ctx context.Context, in *FindByIDRequest, opts ...grpc.CallOption) (*MainResponse, error)
}

type roleGroupRolesClient struct {
	cc grpc.ClientConnInterface
}

func NewRoleGroupRolesClient(cc grpc.ClientConnInterface) RoleGroupRolesClient {
	return &roleGroupRolesClient{cc}
}

func (c *roleGroupRolesClient) Store(ctx context.Context, in *RoleGroupRoleRequest, opts ...grpc.CallOption) (*MainResponse, error) {
	out := new(MainResponse)
	err := c.cc.Invoke(ctx, "/role_group_role.RoleGroupRoles/Store", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleGroupRolesClient) Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*FetchResponse, error) {
	out := new(FetchResponse)
	err := c.cc.Invoke(ctx, "/role_group_role.RoleGroupRoles/Fetch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleGroupRolesClient) FindByID(ctx context.Context, in *FindByIDRequest, opts ...grpc.CallOption) (*MainResponse, error) {
	out := new(MainResponse)
	err := c.cc.Invoke(ctx, "/role_group_role.RoleGroupRoles/FindByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleGroupRolesClient) Update(ctx context.Context, in *RoleGroupRoleRequest, opts ...grpc.CallOption) (*MainResponse, error) {
	out := new(MainResponse)
	err := c.cc.Invoke(ctx, "/role_group_role.RoleGroupRoles/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleGroupRolesClient) Delete(ctx context.Context, in *FindByIDRequest, opts ...grpc.CallOption) (*MainResponse, error) {
	out := new(MainResponse)
	err := c.cc.Invoke(ctx, "/role_group_role.RoleGroupRoles/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoleGroupRolesServer is the server API for RoleGroupRoles service.
// All implementations must embed UnimplementedRoleGroupRolesServer
// for forward compatibility
type RoleGroupRolesServer interface {
	Store(context.Context, *RoleGroupRoleRequest) (*MainResponse, error)
	Fetch(context.Context, *FetchRequest) (*FetchResponse, error)
	FindByID(context.Context, *FindByIDRequest) (*MainResponse, error)
	Update(context.Context, *RoleGroupRoleRequest) (*MainResponse, error)
	Delete(context.Context, *FindByIDRequest) (*MainResponse, error)
	mustEmbedUnimplementedRoleGroupRolesServer()
}

// UnimplementedRoleGroupRolesServer must be embedded to have forward compatible implementations.
type UnimplementedRoleGroupRolesServer struct {
}

func (UnimplementedRoleGroupRolesServer) Store(context.Context, *RoleGroupRoleRequest) (*MainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Store not implemented")
}
func (UnimplementedRoleGroupRolesServer) Fetch(context.Context, *FetchRequest) (*FetchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fetch not implemented")
}
func (UnimplementedRoleGroupRolesServer) FindByID(context.Context, *FindByIDRequest) (*MainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByID not implemented")
}
func (UnimplementedRoleGroupRolesServer) Update(context.Context, *RoleGroupRoleRequest) (*MainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedRoleGroupRolesServer) Delete(context.Context, *FindByIDRequest) (*MainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedRoleGroupRolesServer) mustEmbedUnimplementedRoleGroupRolesServer() {}

// UnsafeRoleGroupRolesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoleGroupRolesServer will
// result in compilation errors.
type UnsafeRoleGroupRolesServer interface {
	mustEmbedUnimplementedRoleGroupRolesServer()
}

func RegisterRoleGroupRolesServer(s grpc.ServiceRegistrar, srv RoleGroupRolesServer) {
	s.RegisterService(&RoleGroupRoles_ServiceDesc, srv)
}

func _RoleGroupRoles_Store_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleGroupRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleGroupRolesServer).Store(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/role_group_role.RoleGroupRoles/Store",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleGroupRolesServer).Store(ctx, req.(*RoleGroupRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleGroupRoles_Fetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleGroupRolesServer).Fetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/role_group_role.RoleGroupRoles/Fetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleGroupRolesServer).Fetch(ctx, req.(*FetchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleGroupRoles_FindByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleGroupRolesServer).FindByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/role_group_role.RoleGroupRoles/FindByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleGroupRolesServer).FindByID(ctx, req.(*FindByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleGroupRoles_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleGroupRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleGroupRolesServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/role_group_role.RoleGroupRoles/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleGroupRolesServer).Update(ctx, req.(*RoleGroupRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleGroupRoles_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleGroupRolesServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/role_group_role.RoleGroupRoles/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleGroupRolesServer).Delete(ctx, req.(*FindByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RoleGroupRoles_ServiceDesc is the grpc.ServiceDesc for RoleGroupRoles service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoleGroupRoles_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "role_group_role.RoleGroupRoles",
	HandlerType: (*RoleGroupRolesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Store",
			Handler:    _RoleGroupRoles_Store_Handler,
		},
		{
			MethodName: "Fetch",
			Handler:    _RoleGroupRoles_Fetch_Handler,
		},
		{
			MethodName: "FindByID",
			Handler:    _RoleGroupRoles_FindByID_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _RoleGroupRoles_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _RoleGroupRoles_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/roles/roleGroupRole/roleGroupRole.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: proto/roles/roleGroup/roleGroup.proto

package role_group

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RoleGroupsClient is the client API for RoleGroups service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoleGroupsClient interface {
	Store(ctx context.Context, in *RoleGroupRequest, opts ...grpc.CallOption) (*MainResponse, error)
	Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*FetchResponse, error)
	FindByID(ctx context.Context, in *FindByIDRequest, opts ...grpc.CallOption) (*MainResponse, error)
	Update(ctx context.Context, in *RoleGroupRequest, opts ...grpc.CallOption) (*MainResponse, error)
	Delete(ctx context.Context, in *FindByIDRequest, opts ...grpc.CallOption) (*MainResponse, error)
	UpdateActive(ctx context.Context, in *FindByIDRequest, opts ...grpc.CallOption) (*MainResponse, error)
}

type roleGroupsClient struct {
	cc grpc.ClientConnInterface
}

func NewRoleGroupsClient(cc grpc.ClientConnInterface) RoleGroupsClient {
	return &roleGroupsClient{cc}
}

func (c *roleGroupsClient) Store(ctx context.Context, in *RoleGroupRequest, opts ...grpc.CallOption) (*MainResponse, error) {
	out := new(MainResponse)
	err := c.cc.Invoke(ctx, "/role_group.RoleGroups/Store", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleGroupsClient) Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*FetchResponse, error) {
	out := new(FetchResponse)
	err := c.cc.Invoke(ctx, "/role_group.RoleGroups/Fetch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleGroupsClient) FindByID(ctx context.Context, in *FindByIDRequest, opts ...grpc.CallOption) (*MainResponse, error) {
	out := new(MainResponse)
	err := c.cc.Invoke(ctx, "/role_group.RoleGroups/FindByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleGroupsClient) Update(ctx context.Context, in *RoleGroupRequest, opts ...grpc.CallOption) (*MainResponse, error) {
	out := new(MainResponse)
	err := c.cc.Invoke(ctx, "/role_group.RoleGroups/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleGroupsClient) Delete(ctx context.Context, in *FindByIDRequest, opts ...grpc.CallOption) (*MainResponse, error) {
	out := new(MainResponse)
	err := c.cc.Invoke(ctx, "/role_group.RoleGroups/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleGroupsClient) UpdateActive(ctx context.Context, in *FindByIDRequest, opts ...grpc.CallOption) (*MainResponse, error) {
	out := new(MainResponse)
	err := c.cc.Invoke(ctx, "/role_group.RoleGroups/UpdateActive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoleGroupsServer is the server API for RoleGroups service.
// All implementations must embed UnimplementedRoleGroupsServer
// for forward compatibility
type RoleGroupsServer interface {
	Store(context.Context, *RoleGroupRequest) (*MainResponse, error)
	Fetch(context.Context, *FetchRequest) (*FetchResponse, error)
	FindByID(context.Context, *FindByIDRequest) (*MainResponse, error)
	Update(context.Context, *RoleGroupRequest) (*MainResponse, error)
	Delete(context.Context, *FindByIDRequest) (*MainResponse, error)
	UpdateActive(context.Context, *FindByIDRequest) (*MainResponse, error)
	mustEmbedUnimplementedRoleGroupsServer()
}

// UnimplementedRoleGroupsServer must be embedded to have forward compatible implementations.
type UnimplementedRoleGroupsServer struct {
}

func (UnimplementedRoleGroupsServer) Store(context.Context, *RoleGroupRequest) (*MainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Store not implemented")
}
func (UnimplementedRoleGroupsServer) Fetch(context.Context, *FetchRequest) (*FetchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fetch not implemented")
}
func (UnimplementedRoleGroupsServer) FindByID(context.Context, *FindByIDRequest) (*MainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByID not implemented")
}
func (UnimplementedRoleGroupsServer) Update(context.Context, *RoleGroupRequest) (*MainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedRoleGroupsServer) Delete(context.Context, *FindByIDRequest) (*MainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedRoleGroupsServer) UpdateActive(context.Context, *FindByIDRequest) (*MainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateActive not implemented")
}
func (UnimplementedRoleGroupsServer) mustEmbedUnimplementedRoleGroupsServer() {}

// UnsafeRoleGroupsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoleGroupsServer will
// result in compilation errors.
type UnsafeRoleGroupsServer interface {
	mustEmbedUnimplementedRoleGroupsServer()
}

func RegisterRoleGroupsServer(s grpc.ServiceRegistrar, srv RoleGroupsServer) {
	s.RegisterService(&RoleGroups_ServiceDesc, srv)
}

func _RoleGroups_Store_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleGroupsServer).Store(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/role_group.RoleGroups/Store",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleGroupsServer).Store(ctx, req.(*RoleGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleGroups_Fetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleGroupsServer).Fetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/role_group.RoleGroups/Fetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleGroupsServer).Fetch(ctx, req.(*FetchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleGroups_FindByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleGroupsServer).FindByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/role_group.RoleGroups/FindByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleGroupsServer).FindByID(ctx, req.(*FindByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleGroups_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleGroupsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/role_group.RoleGroups/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleGroupsServer).Update(ctx, req.(*RoleGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleGroups_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleGroupsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/role_group.RoleGroups/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleGroupsServer).Delete(ctx, req.(*FindByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleGroups_UpdateActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleGroupsServer).UpdateActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/role_group.RoleGroups/UpdateActive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleGroupsServer).UpdateActive(ctx, req.(*FindByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RoleGroups_ServiceDesc is the grpc.ServiceDesc for RoleGroups service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoleGroups_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "role_group.RoleGroups",
	HandlerType: (*RoleGroupsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Store",
			Handler:    _RoleGroups_Store_Handler,
		},
		{
			MethodName: "Fetch",
			Handler:    _RoleGroups_Fetch_Handler,
		},
		{
			MethodName: "FindByID",
			Handler:    _RoleGroups_FindByID_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _RoleGroups_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _RoleGroups_Delete_Handler,
		},
		{
			MethodName: "UpdateActive",
			Handler:    _RoleGroups_UpdateActive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/roles/roleGroup/roleGroup.proto",
}
